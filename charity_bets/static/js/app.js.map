{"version":3,"sources":["app.js","bets/bets-controller.js","bet-view/bet-controller.js","bet-view/bet.js","bet-view/comment.js","bet-view/donation.js","bet-view/edit-bet-controller.js","directives/bet-payment-directive.js","landing/charity-controller.js","landing/landing-controller.js","services/bet-service.js","services/user-service.js","nav/nav-controller.js","user/payment-form.js","user/user-controller.js","util/util.js","errors/404/error-404-controller.js"],"names":[],"mappingsdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfbfile":"app.js","sourcesContent":["// Declare our app module, and import the ngRoute and ngAnimate\n// modules into it.\nvar app = angular.module('app', ['mgcrea.ngStrap', 'angularPayments','ngRoute']);\n\n// Set up our 404 handler\napp.config(['$routeProvider', function ($routeProvider) {\n  $routeProvider.otherwise({\n    controller: 'Error404Ctrl',\n    controllerAs: 'vm',\n    templateUrl: 'static/errors/404/error-404.html'\n  });\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'static/bets/bets.html',\n    controller: 'BetsCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      bets: ['betService', function (betService){\n        return betService.getBets();\n      }]\n    }\n  };\n  $routeProvider.when('/bets', routeDefinition);\n}])\n.controller('BetsCtrl', ['$location', 'betService', 'bets', function ($location, betService, bets) {\n\n  var self = this;\n  self.bets = bets;\n  // self.currentUser = currentUser;\n  // self.users = users;\n\n  self.goToBet = function (id) {\n    $location.path('/bet/' + id );\n    };\n\n\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    controller: 'ViewBetCtrl',\n    controllerAs: 'vm',\n    templateUrl: '/static/bet-view/bet.html',\n    resolve: {\n      bet: ['betService', '$route', function (betService, $route) {\n        var id = $route.current.params.id;\n        return betService.getBet(id);\n      }],\n      currentUser: ['userService', function (userService) {\n        return userService.getCurrent().then(function (result) {\n          return result.data;\n        });\n      }],\n      charities: ['betService', function(betService) {\n        return betService.getCharities().then(function (result) {\n          console.log(result);\n          return result;\n        });\n      }]\n      // comments: ['betService', function (betService) {\n      //   return betService.getComments().then(function (result){\n      //     return result.data;\n      //   });\n      // }]\n    }\n  };\n  $routeProvider.when('/bet/:id', routeDefinition);\n}])\n.controller('ViewBetCtrl', ['$location', 'bet', 'betService', 'currentUser', 'Comment', 'charities', 'Donation', function ($location, bet, betService, currentUser, Comment, charities, Donation) {\n\n  var self = this;\n  self.bet = bet;\n  self.currentUser = currentUser;\n  self.comment=Comment();\n  self.donation=Donation();\n  self.charities=charities;\n  self.modalaction=false;\n  // self.showme=true;\n\n  self.isBettor = function () {\n    return (currentUser.id === bet.challenger || currentUser.id  === bet.creator);\n  };\n  self.isChallengeable = function () {\n    return (bet.status === \"pending\" && currentUser.id === bet.challenger);\n  };\n  self.isPendingCreator = (bet.status === \"pending\" && currentUser.id === bet.creator);\n  self.isDonator = (bet.status === \"complete\" && currentUser.id === bet.verified_loser);\n\n  self.isActive = function () {\n      return (bet.status === \"active\");\n  };\n\n  self.isWaitingOnCurrentUser = function () {\n    var resolverId = Number((bet.challenger_outcome < 0 ? bet.creator_outcome : bet.challenger_outcome || bet.creator_outcome < 0 ? bet.challenger_outcome : bet.creator_outcome));\n    return (bet.status === 'unresolved' && resolverId !== currentUser.id);\n  };\n\n\n  self.showResolutionButton = function () {\n      return self.isBettor() && (self.isWaitingOnCurrentUser() || self.isActive());\n  };\n\n\n  self.betOutcomeWin = function (id) {\n     betService.betOutcomeWin(bet.id, currentUser.id).then(function (result) {\n       self.bet=result;\n       bet=self.bet\n     });\n  };\n\n  self.betOutcomeLose = function (id) {\n     betService.betOutcomeLose(bet.id);\n    //  self.showme=false;\n  };\n\n  self.acceptBet = function (charity) {\n    betService.acceptBet(bet.id).then(function (result) {\n      console.log(result);\n      self.bet.status=result.status;\n    });\n    betService.challengerCharity(bet.id, bet.charity_challenger);\n  };\n\n  self.addComment = function () {\n    betService.addComment(bet.id, self.comment).then(function(result) {\n      self.comment=result.comment;\n    });\n    self.comment=\"\";\n  };\n\n  self.sendStripe = function (card) {\n    self.betOutcomeLose(currentUser.id);\n    console.log(bet);\n    Stripe.card.createToken(card, function (status, result) {\n      console.log('GOT', result);\n      console.log(bet.id)\n      betService.sendStripe(self.bet.id, result.id);\n      location.reload();\n    });\n  };\n\n  self.sendStripeDonation = function (card, creatorid, amount) {\n    console.log(card);\n    console.log(creatorid);\n    console.log(amount);\n    Stripe.card.createToken(card, function (status, result) {\n      console.log('GOT', result);\n      // betService.addDonation(self.bet.id, creatorid, self.amount, result.id).then(self.goToBet);\n    });\n  };\n\n  self.addDonation = function () {\n    betService.addDonation(self.bet.id, self.Donation).then(self.goToBet);\n  };\n\n\n\n\n\n\n\n\n}]);\n","app.factory('Bet', function () {\n  return function (spec) {\n    spec = spec || {};\n    return {\n        title: spec.title,\n        challenger_name: spec.challenger_name,\n        amount: spec.amount,\n        date: spec.date,\n        location: spec.location,\n        description: spec.description,\n        charity_creator: spec.charity_creator\n    };\n  };\n});\n","app.factory('Comment', function () {\n  return function (spec) {\n    spec = spec || {};\n    return {\n      comment: spec.comment\n      \n    };\n  };\n});\n","app.factory('Donation', function () {\n  return function (spec) {\n    spec = spec || {};\n    return {\n        amount: spec.donation_amount,\n        challenger_id: spec.challenger_id,\n        creator_id: spec.creator_id,\n    };\n  };\n});\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: '/static/bet-view/edit-bet.html',\n    controller: 'EditBetCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      currentUser: ['userService', function (userService) {\n        return userService.getCurrent().then(function (result) {\n          return result.data;\n        });\n      }],\n      users: ['userService', function(userService) {\n        return userService.getUsers().then(function (result) {\n          console.log(result.data);\n          return result.data;\n        });\n      }],\n      charities: ['betService', function(betService) {\n        return betService.getCharities().then(function (result) {\n          console.log(result);\n          return result;\n        });\n      }]\n    }\n  };\n  $routeProvider.when('/createbet', routeDefinition);\n}])\n.controller('EditBetCtrl', ['$location', 'Bet', 'betService', 'currentUser', 'users', 'charities', function ($location, Bet, betService, currentUser, users, charities) {\n\n  var self = this;\n  self.bet = Bet();\n  self.currentUser = currentUser;\n  self.users = users;\n  self.charities = charities;\n\n\n  self.addBet = function () {\n    betService.addBet(self.bet).then(self.goToBet);\n  };\n\n  self.goToBet = function (bet) {\n    $location.path('/bet/' + bet.id);\n  };\n\n  // self.getUsers = function () {\n  //   userService.getUsers();\n  // };\n\n  self.cancel = function(e) {\n    if (e.keyCode == 27) {\n      self.betForm.challengerName.$rollbackViewValue();\n    }\n  };\n\n\n\n}]);\n","app.directive('betPaymentForm', function() {\n  return {\n    restrict: 'E',\n    templateUrl: 'static/directives/bet-payment-form-temp.html'\n  }\n});\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: '/static/landing/organizations.html',\n    controller: 'OrgCtrl',\n    controllerAs: 'vm',\n  };\n  $routeProvider.when('/organizations', routeDefinition);\n}])\n.controller('OrgCtrl', ['$location', function ($location) {\n\n  var self = this;\n\n\n\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: '/static/landing/landing.html',\n    controller: 'LandingCtrl',\n    controllerAs: 'vm',\n  };\n  $routeProvider.when('/', routeDefinition);\n}])\n.controller('LandingCtrl', ['$location', function ($location) {\n\n  var self = this;\n\n\n\n}]);\n","app.factory('betService', ['$http', '$log', function($http, $log) {\n\n  function get(url) {\n    return processAjaxPromise($http.get(url));\n  }\n\n  function put(url, bet) {\n    return processAjaxPromise($http.put(url, bet));\n  }\n\n  function post(url, share) {\n    return processAjaxPromise($http.post(url, share));\n  }\n\n  function remove(url) {\n    return processAjaxPromise($http.delete(url));\n\n  }\n\n  function processAjaxPromise(p) {\n    return p.then(function (result) {\n      var data = result.data;\n      return data.data;\n    })\n    .catch(function (error) {\n     $log.log(error);\n     throw error;\n    });\n  }\n\n\n  return {\n    // getBetList: function () {\n    //   return get('/api/res');\n    // },\n\n    getBet: function (id) {\n      return get('/api/bets/' + id);\n    },\n\n    addBet: function (bet) {\n      return post('/api/user/bets', bet);\n    },\n\n    getBets: function () {\n      return get('/api/bets');\n    },\n\n    betOutcomeWin: function(id, currentuserId) {\n      return put('/api/bets/' + id, {\"outcome\": currentuserId});\n    },\n\n    betOutcomeLose: function(id) {\n      console.log('/api/bets/' + id);\n      return put('/api/bets/' + id, {\"outcome\": -1});\n    },\n\n    acceptBet: function(id) {\n      return put('/api/bets/' + id, {\"status\": \"active\"});\n    },\n\n    addComment: function (id, comment) {\n      return post('/api/bets/' + id + '/comments', comment);\n    },\n\n    getCharities: function () {\n      return get('/api/charities');\n    },\n\n    challengerCharity: function (id, charity) {\n      console.log('/api/bets/' + id, {'charity_challenger': charity});\n      return put ('/api/bets/' + id, {'charity_challenger': charity});\n    },\n\n    sendStripe: function (betid, resultid) {\n      console.log('api/bets/' + betid + '/pay_bet', resultid);\n      return post('api/bets/' + betid + '/pay_bet', {'token': resultid});\n    },\n\n    addDonation: function(betid, donation) {\n      console.log('api/bets/' + betid + '/donation', donation);\n      return post('api/bets/' + betid + '/donation', donation);\n    }\n\n\n\n    // deleteShare: function (id) {\n    //   return remove('/api/res/' + id);\n    // }\n  };\n}]);\n","app.factory('userService', ['$http', '$q', '$log', function($http, $q, $log) {\n\n  function get(url) {\n    return processAjaxPromise($http.get(url));\n  }\n\n  function post(url, share) {\n    return processAjaxPromise($http.post(url, share));\n  }\n\n  function processAjaxPromise(p) {\n    return p.then(function (result) {\n      return result.data;\n    })\n    .catch(function (error) {\n      $log.log(error);\n    });\n  }\n\n  return {\n    getUsers: function () {\n      return get('/api/users');\n    },\n\n    getByUserId: function (userId) {\n      if (!userId) {\n        throw new Error('getByUserId requires a user id');\n      }\n\n      return get('/api/users/' + userId);\n    },\n\n    addUser: function (user) {\n      return processAjaxPromise($http.post('/api/users', user));\n    },\n\n    getCurrent: function () {\n      return get('/api/user/me');\n    },\n\n    logOut: function (currentUser) {\n      return post('/api/logout');\n    },\n\n    getCurrentUserBets: function () {\n      return get('/api/user/bets');\n    },\n\n    getBetsByUser: function () {\n      return get ('api/user/' + id + '/bets');\n    },\n\n    // sendStripe: function (betid, resultid) {\n    //   console.log('api/bets/' + betid + '/pay_bet', resultid);\n    //   return post('api/bets/' + betid + '/pay_bet', {'token': resultid});\n    // }\n\n  };\n}]);\n","app.controller('MainNavCtrl',\n  ['$location', 'StringUtil', 'userService', function($location, StringUtil, userService) {\n    var self = this;\n\n    self.isActive = function (path) {\n      // The default route is a special case.\n      if (path === '/') {\n        return $location.path() === '/';\n      }\n      return StringUtil.startsWith($location.path(), path);\n    };\n\n}]);\n","// app.directive('paymentForm', function() {\n//   return {\n//     restrict: 'E',\n//     templateUrl: 'static/directives/user-payment-form-template.html'\n//   };\n// });\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'static/user/user-profile.html',\n    controller: 'UserCtrl',\n    controllerAs: 'vm',\n    resolve: {\n          currentUser: ['userService', function (userService) {\n          return userService.getCurrent().then(function (result) {\n            return result.data;\n          });\n          }],\n          currentUserBets: ['userService', function (userService) {\n          console.log(userService.getCurrentUserBets());\n          return userService.getCurrentUserBets().then(function (result) {\n            return result.data;\n          });\n          }]\n      }\n  };\n  $routeProvider.when('/user/user-profile', routeDefinition);\n}])\n.controller('UserCtrl', ['$location', 'userService', 'currentUser', 'currentUserBets', '$scope', function ($location, userService, currentUser, currentUserBets, $scope) {\n\n  var self = this;\n  self.currentUser = currentUser;\n  self.currentUserBets = currentUserBets;\n  self.isBetLoser = (currentUser.id === currentUserBets.verified_loser && currentUserBets.loser_paid === \"unpaid\");\n\n  // self.thisBetId = angular.element(document.querySelector('.user-stripe-form'))\n  // var stripeButton = document.querySelector('.form-stripe-button');\n  // var id;\n  // stripeButton.addEventListener(\"click\", function (e) {\n  //   var button = e.target;\n  //   id = button.parentNode.getAttribute('data-id');\n  // });\n  // console.log(id);\n  // var thisStripeId = this.aStripeForm.getAttribute('data-id');\n  // var thisStripeId = this.aStripeForm.data('id');\n\n\n\n  $scope.stripeCallback = function (code, result) {\n      var buttons = document.querySelector('.form-stripe-button');\n      var id = buttons.parentNode.getAttribute('data-id');\n      if (result.error) {\n          window.alert('it failed! error: ' + result.error.message);\n      } else {\n          window.alert('success! token: ' + result.id);\n          alert(id, result.id);\n          userService.sendStripe(id, result.id);\n      }\n  };\n\n  self.stripeTest = function (dataID) {\n    alert(dataID);\n  };\n\n  //self.sendToken = function ( )\n\n  // self.sendStripe = function (bet) {\n  //   console.log(bet);\n  //   Stripe.card.createToken(bet.card, function (status, result) {\n  //     console.log('GOT', result);\n  //     console.log(result.id);\n  //     userService.sendStripe(bet.id, result.id);\n  //   });\n  // };\n\n  // self.sendStripe = function (id) {\n  //  alert(\"striping!\");\n  //  userService.sendStripe(id);\n  // }\n\n\n\n  // app.directive('stripeForm', ['$log', function($log) {\n  //   return function(scope, elem, attrs) {\n  //     console.log('x');\n  //     var form =  document.createElement(\"form\");;\n  //     form.action = \"charge\";\n  //     form.method = \"POST\";\n  //     var script =  document.createElement(\"script\");\n  //     script.src = \"https://checkout.stripe.com/checkout.js\";\n  //     script.className = \"stripe-button\";\n  //     script.setAttribute(\"data-key\", \"pk_test_6pRNASCoBOKtIshFeQd4XMUh\");\n  //     script.setAttribute(\"data-image\", \"square-image.png\");\n  //     script.setAttribute(\"data-name\", \"Demo Site\");\n  //     script.setAttribute(\"data-description\", \"2 widgets ($20.00)\");\n  //     script.setAttribute(\"data-amount\", \"2000\");\n  //\n  //     form.appendChild(script);\n  //\n  //     elem.append(angular.element(form));\n  //   };\n  // }]);\n      $scope.labels = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"];\n      $scope.series = ['Series A', 'Series B'];\n      $scope.data = [\n        [65, 59, 80, 81, 56, 55, 40],\n        [28, 48, 40, 19, 86, 27, 90]\n      ];\n      $scope.onClick = function (points, evt) {\n        console.log(points, evt);\n      };\n\n\n\n}]);\n","app.factory('StringUtil', function() {\n  return {\n    startsWith: function (str, subStr) {\n      str = str || '';\n      return str.slice(0, subStr.length) === subStr;\n    }\n  };\n});\n","app.controller('Error404Ctrl', ['$location', function ($location) {\n  this.message = 'Could not find: ' + $location.url();\n}]);\n"],"sourceRoot":"/source/"}